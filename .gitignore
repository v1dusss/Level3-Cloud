/.idea

# Go-backend specific ignores
# Binaries for programs and plugins
go-backend/myapp
go-backend/*.exe
go-backend/*.exe~
go-backend/*.dll
go-backend/*.so
go-backend/*.dylib

# Test binary, built with `go test -c`
go-backend/*.test

# Output of the go coverage tool
go-backend/*.out

# Dependency directories (Go modules)
go-backend/vendor/

# Go workspace file
go-backend/go.work

# IDE and editor files
go-backend/.vscode/
go-backend/.idea/
go-backend/*.swp
go-backend/*.swo
go-backend/*~

# OS generated files
go-backend/.DS_Store
go-backend/.DS_Store?
go-backend/._*
go-backend/.Spotlight-V100
go-backend/.Trashes
go-backend/ehthumbs.db
go-backend/Thumbs.db

# Local environment files
go-backend/.env
go-backend/.env.local
go-backend/.env.*.local

# Build artifacts
go-backend/dist/
go-backend/build/

# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc